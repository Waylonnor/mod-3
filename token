// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";

contract Token is ERC20 {
    address public owner;
    bool public isEnabled;

    modifier onlyOwner() {
        require(msg.sender == owner, "Access denied: Only the owner can call this function");
        _;
    }

    constructor() ERC20("Token", "TK") {
        owner = msg.sender;
        _mint(owner, 500);
        isEnabled = true;
    }

    function mintTokens(address endPoint, uint256 mass) external onlyOwner {
        _mint(endPoint, mass);
    }

    function burnTokens(uint256 massToBurn) external {
        require(balanceOf(msg.sender) >= massToBurn, "Burn failed: Insufficient balance");
        _burn(msg.sender, massToBurn);
    }

    function transferTokens(address endPoint, uint256 massToSend) external {
        require(balanceOf(msg.sender) >= massToSend, "Transfer failed: Insufficient balance");
        _transfer(msg.sender, endPoint, massToSend);
    }
}
